#json
{
"author":"marasm",
"dependencies":[],
"init":"$__ALZ_INIT"
}
#end
halt 0; additional utilities
$__ALZ_INIT ; alzheimer initialization
gvar True
gvar False
mov True 1
mov False 0
ret
$add 
var __ALZ_A
var __ALZ_B
pop __ALZ_B
pop __ALZ_A
add __ALZ_A __ALZ_A __ALZ_B
push __ALZ_A
ret
$sub
var __ALZ_A
var __ALZ_B
pop __ALZ_B
pop __ALZ_A
sub __ALZ_A __ALZ_A __ALZ_B
push __ALZ_A
ret
$mul 
var __ALZ_A
var __ALZ_B
pop __ALZ_B
pop __ALZ_A
mul __ALZ_A __ALZ_A __ALZ_B
push __ALZ_A
ret
$div 
var __ALZ_A
var __ALZ_B
pop __ALZ_B
pop __ALZ_A
div __ALZ_A __ALZ_A __ALZ_B
push __ALZ_A
ret
$floor 
var __ALZ_A
pop __ALZ_A
floor __ALZ_A __ALZ_B
push __ALZ_A
ret
$ceil 
var __ALZ_A
pop __ALZ_A
ceil __ALZ_A __ALZ_B
push __ALZ_A
ret
@__ALZ_ret_true
push 1
ret
@__ALZ_ret_false
push 0
ret
$more
var __ALZ_A
var __ALZ_B
pop __ALZ_B
pop __ALZ_A
sub __ALZ_A __ALZ_A __ALZ_B
jmz __ALZ_A @__ALZ_ret_true
jmp @__ALZ_ret_false
$less
var __ALZ_A
var __ALZ_B
pop __ALZ_B
pop __ALZ_A
sub __ALZ_A __ALZ_B __ALZ_A
jmz __ALZ_A @__ALZ_ret_true
jmp @__ALZ_ret_false
$moreeq
var __ALZ_A
var __ALZ_B
pop __ALZ_B
pop __ALZ_A
sub __ALZ_A __ALZ_A __ALZ_B
jmz __ALZ_A @__ALZ_ret_true
jz __ALZ_A @__ALZ_ret_true
jmp @__ALZ_ret_false
$lesseq
var __ALZ_A
var __ALZ_B
pop __ALZ_B
pop __ALZ_A
sub __ALZ_A __ALZ_B __ALZ_A
jmz __ALZ_A @__ALZ_ret_true
jz __ALZ_A @__ALZ_ret_true
jmp @__ALZ_ret_false
$eq
var __ALZ_A
var __ALZ_B
pop __ALZ_B
pop __ALZ_A
sub __ALZ_A __ALZ_B __ALZ_A
jz __ALZ_A @__ALZ_ret_true
jmp @__ALZ_ret_false
$neq
var __ALZ_A
var __ALZ_B
pop __ALZ_B
pop __ALZ_A
sub __ALZ_A __ALZ_B __ALZ_A
jnz __ALZ_A @__ALZ_ret_true
jmp @__ALZ_ret_false
halt -1 ;
halt 0 ; end of code generation
